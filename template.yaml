AWSTemplateFormatVersion: '2010-09-09'
Description: Infrastructure to process orders via SNS, SQS, Lambda, and DynamoDB
Resources:
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  OrderTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderTopic
  OrderQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueueDLQ
  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrderQueueDLQ.Arn
        maxReceiveCount: 3
  QueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref OrderTopic
      Endpoint: !GetAtt OrderQueue.Arn
      RawMessageDelivery: false
  OrderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OrderQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: sqs:SendMessage
            Resource: !GetAtt OrderQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref OrderTopic
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: OrderProcessorLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoSQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt OrdersTable.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt OrderQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  OrderProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrderProcessor
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3

          # Initialize DynamoDB resource
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('Orders')

          def lambda_handler(event, context):
              for record in event['Records']:
                  try:
                      # First level: parse SQS record body
                      outer_message = json.loads(record['body'])
                      print("Outer SNS message:", outer_message)

                      # Second level: parse 'Message' field from SNS payload
                      message = json.loads(outer_message['Message'])
                      print("Parsed order message:", message)

                      # Save to DynamoDB
                      table.put_item(Item={
                          'orderId': message['orderId'],
                          'userId': message['userId'],
                          'itemName': message['itemName'],
                          'quantity': int(message['quantity']),
                          'status': message['status'],
                          'timestamp': message['timestamp']
                      })

                      print(f"Order {message['orderId']} saved to DynamoDB.")

                  except Exception as e:
                      print("Error processing record:", record)
                      print("Exception:", e)
                      raise e

              return {
                  'statusCode': 200,
                  'body': 'Processed messages.'
              }
  LambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt OrderQueue.Arn
      FunctionName: !Ref OrderProcessorLambda
      BatchSize: 5
      Enabled: true